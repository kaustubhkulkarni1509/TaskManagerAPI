//index js file before saggrigating it into routers

const express = require('express')
require('./db/mongoose') //file containing database connection details
const User = require('./models/user')
const Task = require('./models/task')

const userRouter = require('../src/routers/user')


const app = express()

const port = process.env.port || 3000

app.use(express.json()) //this automatically pars incoming json to object

app.use(userRouter)


// /users is one endpoint 
//create user in db
// app.post('/users',(req,res)=>{
//     console.log(req.body)

//     const user = new User(req.body)
//     user.save().then(()=>{
//         res.status(201)
//         res.send(user)
//     }).catch((error)=>{
//         res.status(400)
//         res.send(error)
//     })
    
// })

//create user with async functionality
app.post('/users',async (req,res)=>{
    const user = new User(req.body)
    
    try{
        await user.save()
        res.status(201).send(user)
    }catch(e){
        res.status(400).send(e)
    }
    
})

//get list of all users
// app.get('/users',(req,res)=>{
//     User.find({}).then((users)=>{
//         res.status(200)
//         res.send(users)
//     }).catch((error)=>{
//         req.status(500).send(error)
//     })
// })
//get all users async method
app.get('/users',async (req,res)=>{
    
    
    try{
        const users = await User.find({})
        res.status(200)
        res.send(users)
    }catch(e){
        req.status(500).send(error)
    }
    
})

//get individual user by ID
// app.get('/users/:id',(req,res)=>{
//     console.log(req.params)
//     const _id = req.params.id

//     //find one by name
//     // User.findOne({name:_id}).then((user)=>{
//     //     res.send(user)
//     // }).catch((error)=>{
//     //     res.status(500).send(error)
//     // })

//     User.findById(_id).then((user)=>{
//         if(!user){
//             return res.status(404).send()
//         }
//         res.send(user)
//     }).catch((e)=>{
//         res.status(500).send(e)
//     })
// })

//get single user by id async method
app.get('/users/:id',async(req,res)=>{
    console.log(req.params)
    const _id = req.params.id

    try{
        const user = await User.findById(_id)
        if(!user){
            return res.status(404).send()
        }
        res.send(user)
    }catch(e){
        res.status(500).send(e)
    }

})

//update user async method
app.patch('/users/:id',async(req,res)=>{
    const updates = Object.keys(req.body)
    const allowedUpdates = ['name','email','password','age']
    const isValidOperation = updates.every((update)=>{
        return allowedUpdates.includes(update)
    })

    if(!isValidOperation){
        return res.status(400).send({error:'Invalid update fields are given'})
    }

    try{
        const _id = req.params.id
        const user = await User.findByIdAndUpdate(_id,req.body,{new:true,runValidators:true})

        if(!user){
            return res.status(404).send()
        }
        res.status(200).send(user)
    }catch(error){
        res.status(400).send(error)
    }
})

//delete user by id async method
app.delete('/users/:id',async(req,res)=>{
    const _id = req.params.id
    try{
        const user = await User.findByIdAndDelete(_id)
        if(!user){
            return res.status(404).send()
        }
        res.send(user)
    }catch(error){
        res.status(500).send(error)
    }
})

/////////////////////////////T A S K S//////////////////////////////////////////////////////////////////////////////////////

//create task in db
// app.post('/tasks',(req,res)=>{
//     console.log(req.body)
//     const task = new Task(req.body)
//     task.save().then(()=>{
//         res.status(201)
//         res.send(task)
//     }).catch((error)=>{
//         res.status(400).send(error)
//     })

// })

//create task by async method
app.post('/tasks',async(req,res)=>{
    console.log(req.body)
    const task = new Task(req.body)
    try{
        await task.save()
        res.status(201)
        res.send(task)
    }catch(error){
        res.status(400).send(error)
    }
})


//get all tasks
// app.get('/tasks',(req,res)=>{
//     Task.find({}).then((tasks)=>{
//         res.status(200).send(tasks)
//     }).catch((error)=>{
//         res.status(500)
//         res.send(error)
//     })
// })

//get all tasks async method
app.get('/tasks', async (req,res)=>{
    try{
        const task = await Task.find({})
        res.status(200).send(task)
    }catch(error){
        res.status(500)
        res.send(error)
    }
    
})

//get task by id
// app.get('/tasks/:id',(req,res)=>{
//     const _id = req.params.id
//     Task.findById(_id).then((task)=>{
//         if(!task){
//             return res.status(404).send() 
//         }
//         res.send(task)
//     }).catch((error)=>{
//         res.status(500).send(error)
//     })
// })

//get task by id async method
app.get('/tasks/:id',async(req,res)=>{
    const _id = req.params.id
    try{
        const task = await Task.findById(_id)
        if(!task){
            return res.status(404).send() 
        }
        res.send(task)
    }catch(error){
        res.status(500).send(error)
    }

})

//update task async method

app.patch('/tasks/:id',async (req,res)=>{
    const updates = Object.keys(req.body)
    const allowedUpdates = ['description','completed']
    const isValidOperation = updates.every((update)=>{
        return allowedUpdates.includes(update)
    })

    if(!isValidOperation){
        return res.status(400).send({error:'Invalid update fields are given'})
    }

    try{
        const _id = req.params.id
        const task = await Task.findByIdAndUpdate(_id,req.body,{new:true,runValidators:true})

        if(!task){
            return res.status(404).send()
        }
        res.status(200).send(task)
    }catch(error){
        res.status(400).send(error)
    }

})


//delete task by id async method
app.delete('/tasks/:id',async(req,res)=>{
    const _id = req.params.id
    try{
        const task = await Task.findByIdAndDelete(_id)
        if(!task){
            return res.status(404).send()
        }
        res.send(task)
    }catch(error){
        res.status(500).send(error)
    }
})


//app is listning on port defined above
app.listen(port,()=>{
    console.log('server is up on port '+port)
})